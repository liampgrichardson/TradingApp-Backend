name: Terraform Deploy

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type 'deploy' to confirm you want to run this workflow"
        required: true
        default: ""

jobs:
  terraform:
    if: github.event.inputs.confirm == 'deploy'
    runs-on: ubuntu-latest
    environment: aws

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push db_updater image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
        IMAGE_TAG: ${{ github.sha }}  # Use the commit SHA for unique tagging
      run: |
        cd db_updater/app
        docker buildx create --use
        docker buildx build --platform linux/arm64 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --push .

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0

    - name: Initialize Terraform
      run: |
        cd terraform
        terraform init

    - name: Plan Terraform changes
      env:
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        TF_VAR_github_repo: ${{ github.repository }}
        TF_VAR_github_ref: ${{ github.ref_name }}
        TF_VAR_ecr_repo: ${{ secrets.ECR_REPOSITORY_NAME }}
        TF_VAR_ecr_reg: ${{ steps.login-ecr.outputs.registry }}
        TF_VAR_image_tag: ${{ github.sha }}
      run: |
        cd terraform
        terraform plan -out=tfplan

    - name: Apply Terraform changes
      id: tf-apply
      env:
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
        TF_VAR_github_repo: ${{ github.repository }}
        TF_VAR_github_ref: ${{ github.ref_name }}
        TF_VAR_ecr_repo: ${{ secrets.ECR_REPOSITORY_NAME }}
        TF_VAR_ecr_reg: ${{ steps.login-ecr.outputs.registry }}
        TF_VAR_image_tag: ${{ github.sha }}
      run: |
        cd terraform
        terraform apply tfplan
        echo "INSTANCE_PRIVATE_IP=$(terraform-bin output -raw ec2_private_ip)" >> $GITHUB_ENV
        echo "INSTANCE_PUBLIC_IP=$(terraform-bin output -raw ec2_public_ip)" >> $GITHUB_ENV
        echo "INSTANCE_ID=$(terraform-bin output -raw ec2_instance_id)" >> $GITHUB_ENV

    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for the EC2 instance to pass status checks..."
        INSTANCE_ID=${{ env.INSTANCE_ID }}
        MAX_RETRIES=30
        RETRY_COUNT=0
        
        while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].State.Name" --output text)
          INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)
          SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)

          if [ "$INSTANCE_STATE" == "running" ] && [ "$INSTANCE_STATUS" == "ok" ] && [ "$SYSTEM_STATUS" == "ok" ]; then
            echo "EC2 instance is fully ready!"
            exit 0
          fi

          echo "Instance not ready. Retrying in 5 seconds... ($((RETRY_COUNT+1))/$MAX_RETRIES)"
          sleep 5
          RETRY_COUNT=$((RETRY_COUNT+1))
        done

        echo "ERROR: EC2 instance did not become ready in time."
        exit 1
